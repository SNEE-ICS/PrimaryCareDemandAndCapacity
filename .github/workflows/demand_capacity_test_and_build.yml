name: D&C Test & Deploy

on: [push]

jobs:
  test:
    name: Python pytest
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.10", "3.11"]

    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      # Install pip and pytest
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest
          pip install -r requirements.txt
      - name: Test with pytest
        run: python -m pytest tests --doctest-modules --junitxml=junit/test-results-${{ matrix.python-version }}.xml
      - name: Upload pytest test results
        uses: actions/upload-artifact@v3
        with:
          name: pytest-results-${{ matrix.python-version }}
          path: junit/test-results-${{ matrix.python-version }}.xml
        # Use always() to always run this step to publish test results when there are test failures
        if: ${{ always() }}
  notebooks:
    name: Run Jupyter notebooks
    runs-on: ubuntu-latest
    env:
      # Set the path to the notebooks folder
      NOTEBOOKS_PATH: notebooks/outputstest/
      OUTPUTS_PATH: outputs/
    steps:
      - uses: actions/checkout@v4
      - name: Setup Python # Set Python version
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"
      # Install pip and pytest
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Find notebook filenames and save to variable
        # shell script to find all notebooks in the notebooks folder and save to a variable
        run: |
          find ${{ env.NOTEBOOKS_PATH }} -name "*.ipynb" > notebooks.txt
      - name: Run notebooks
        # shell script to run all notebooks in the repo
        run: |
          cd ${{ env.NOTEBOOKS_PATH }}
          while read -r notebook; do
            jupyter execute "$notebook" --allow-errors --ExecutePreprocessor.timeout=600
          done < notebooks.txt
      - name: store data artifacts
        # 
        uses: actions/upload-artifact@v2
        with:
          # upload all of 'outputs' directory
          path: ${{ env.OUTPUTS_PATH }}
          # name the artifact
          name: notebook-outputs
        
        
        

      